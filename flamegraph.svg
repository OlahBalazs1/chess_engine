<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="899669452"><g><title>[ld-linux-x86-64.so.2] (270,483 samples, 0.03%)</title><rect x="0.0000%" y="1029" width="0.0301%" height="15" fill="rgb(227,0,7)" fg:x="140" fg:w="270483"/><text x="0.2500%" y="1039.50"></text></g><g><title>[ld-linux-x86-64.so.2] (270,483 samples, 0.03%)</title><rect x="0.0000%" y="1013" width="0.0301%" height="15" fill="rgb(217,0,24)" fg:x="140" fg:w="270483"/><text x="0.2500%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="997" width="0.0279%" height="15" fill="rgb(221,193,54)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="981" width="0.0279%" height="15" fill="rgb(248,212,6)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="991.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="965" width="0.0279%" height="15" fill="rgb(208,68,35)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="975.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="949" width="0.0279%" height="15" fill="rgb(232,128,0)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="933" width="0.0279%" height="15" fill="rgb(207,160,47)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="943.50"></text></g><g><title>[ld-linux-x86-64.so.2] (250,744 samples, 0.03%)</title><rect x="0.0022%" y="917" width="0.0279%" height="15" fill="rgb(228,23,34)" fg:x="19879" fg:w="250744"/><text x="0.2522%" y="927.50"></text></g><g><title>[ld-linux-x86-64.so.2] (272,262 samples, 0.03%)</title><rect x="0.0000%" y="1045" width="0.0303%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="272262"/><text x="0.2500%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (272,263 samples, 0.03%)</title><rect x="0.0000%" y="1061" width="0.0303%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="272263"/><text x="0.2500%" y="1071.50"></text></g><g><title>find_bishop (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="821" width="0.4136%" height="15" fill="rgb(250,228,42)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="831.50"></text></g><g><title>find_bishop_with_magic (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="805" width="0.4136%" height="15" fill="rgb(240,193,28)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="815.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#2}&gt;&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="789" width="0.4136%" height="15" fill="rgb(216,20,37)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="799.50"></text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#2}&gt;, alloc::alloc::Global&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="773" width="0.4136%" height="15" fill="rgb(206,188,39)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="783.50"></text></g><g><title>extend_desugared&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#2}&gt;&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="757" width="0.4136%" height="15" fill="rgb(217,207,13)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="767.50"></text></g><g><title>next&lt;chess_engine::moving::Move, core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#2}&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="741" width="0.4136%" height="15" fill="rgb(231,73,38)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="751.50"></text></g><g><title>next&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="725" width="0.4136%" height="15" fill="rgb(225,20,46)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="735.50"></text></g><g><title>find&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, &amp;mut chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="709" width="0.4136%" height="15" fill="rgb(210,31,41)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="719.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="693" width="0.4136%" height="15" fill="rgb(221,200,47)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="703.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, (), core::iter::adapters::copied::copy_try_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_bishop_with_magic::{closure_env#1}&gt;&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="677" width="0.4136%" height="15" fill="rgb(226,26,5)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="687.50"></text></g><g><title>next&lt;chess_engine::position::Position&gt; (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="661" width="0.4136%" height="15" fill="rgb(249,33,26)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="671.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,720,606 samples, 0.41%)</title><rect x="0.0303%" y="645" width="0.4136%" height="15" fill="rgb(235,183,28)" fg:x="272263" fg:w="3720606"/><text x="0.2803%" y="655.50"></text></g><g><title>find_king (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="821" width="0.4172%" height="15" fill="rgb(221,5,38)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="831.50"></text></g><g><title>next&lt;(chess_engine::position::Position, core::option::Option&lt;chess_engine::piece::Piece&gt;), core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;core::option::Option&lt;chess_engine::piece::Piece&gt;&gt;&gt;, chess_engine::board::{impl#4}::find_king::{closure_env#0}&gt; (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="805" width="0.4172%" height="15" fill="rgb(247,18,42)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="815.50"></text></g><g><title>map&lt;(usize, &amp;core::option::Option&lt;chess_engine::piece::Piece&gt;), (chess_engine::position::Position, core::option::Option&lt;chess_engine::piece::Piece&gt;), &amp;mut chess_engine::board::{impl#4}::find_king::{closure_env#0}&gt; (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="789" width="0.4172%" height="15" fill="rgb(241,131,45)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="799.50"></text></g><g><title>call_once&lt;((usize, &amp;core::option::Option&lt;chess_engine::piece::Piece&gt;)), chess_engine::board::{impl#4}::find_king::{closure_env#0}&gt; (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="773" width="0.4172%" height="15" fill="rgb(249,31,29)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="783.50"></text></g><g><title>{closure#0} (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="757" width="0.4172%" height="15" fill="rgb(225,111,53)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="767.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,753,393 samples, 0.42%)</title><rect x="0.4438%" y="741" width="0.4172%" height="15" fill="rgb(238,160,17)" fg:x="3992869" fg:w="3753393"/><text x="0.6938%" y="751.50"></text></g><g><title>find_knight (3,746,657 samples, 0.42%)</title><rect x="0.8610%" y="821" width="0.4164%" height="15" fill="rgb(214,148,48)" fg:x="7746262" fg:w="3746657"/><text x="1.1110%" y="831.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;&gt; (3,746,657 samples, 0.42%)</title><rect x="0.8610%" y="805" width="0.4164%" height="15" fill="rgb(232,36,49)" fg:x="7746262" fg:w="3746657"/><text x="1.1110%" y="815.50"></text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;, alloc::alloc::Global&gt; (3,746,657 samples, 0.42%)</title><rect x="0.8610%" y="789" width="0.4164%" height="15" fill="rgb(209,103,24)" fg:x="7746262" fg:w="3746657"/><text x="1.1110%" y="799.50"></text></g><g><title>extend_desugared&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;&gt; (3,746,657 samples, 0.42%)</title><rect x="0.8610%" y="773" width="0.4164%" height="15" fill="rgb(229,88,8)" fg:x="7746262" fg:w="3746657"/><text x="1.1110%" y="783.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,746,657 samples, 0.42%)</title><rect x="0.8610%" y="757" width="0.4164%" height="15" fill="rgb(213,181,19)" fg:x="7746262" fg:w="3746657"/><text x="1.1110%" y="767.50"></text></g><g><title>find_rook (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="821" width="0.4171%" height="15" fill="rgb(254,191,54)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="831.50"></text></g><g><title>deref&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="805" width="0.4171%" height="15" fill="rgb(241,83,37)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="815.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="789" width="0.4171%" height="15" fill="rgb(233,36,39)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="799.50"></text></g><g><title>force&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="773" width="0.4171%" height="15" fill="rgb(226,3,54)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="783.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="757" width="0.4171%" height="15" fill="rgb(245,192,40)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="767.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="741" width="0.4171%" height="15" fill="rgb(238,167,29)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="751.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt;&gt; (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="725" width="0.4171%" height="15" fill="rgb(232,182,51)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="735.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,752,149 samples, 0.42%)</title><rect x="1.2775%" y="709" width="0.4171%" height="15" fill="rgb(231,60,39)" fg:x="11492919" fg:w="3752149"/><text x="1.5275%" y="719.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (18,725,601 samples, 2.08%)</title><rect x="0.0303%" y="837" width="2.0814%" height="15" fill="rgb(208,69,12)" fg:x="272263" fg:w="18725601"/><text x="0.2803%" y="847.50">c..</text></g><g><title>with_capacity&lt;chess_engine::moving::Move&gt; (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="821" width="0.4171%" height="15" fill="rgb(235,93,37)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="831.50"></text></g><g><title>with_capacity_in&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="805" width="0.4171%" height="15" fill="rgb(213,116,39)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="815.50"></text></g><g><title>with_capacity_in&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="789" width="0.4171%" height="15" fill="rgb(222,207,29)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="799.50"></text></g><g><title>with_capacity_in&lt;alloc::alloc::Global&gt; (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="773" width="0.4171%" height="15" fill="rgb(206,96,30)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="783.50"></text></g><g><title>try_allocate_in&lt;alloc::alloc::Global&gt; (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="757" width="0.4171%" height="15" fill="rgb(218,138,4)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="767.50"></text></g><g><title>allocate (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="741" width="0.4171%" height="15" fill="rgb(250,191,14)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="751.50"></text></g><g><title>alloc_impl (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="725" width="0.4171%" height="15" fill="rgb(239,60,40)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="735.50"></text></g><g><title>alloc (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="709" width="0.4171%" height="15" fill="rgb(206,27,48)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="719.50"></text></g><g><title>__rustc::__rdl_alloc (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="693" width="0.4171%" height="15" fill="rgb(225,35,8)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="703.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="677" width="0.4171%" height="15" fill="rgb(250,213,24)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="687.50"></text></g><g><title>[libc.so.6] (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="661" width="0.4171%" height="15" fill="rgb(247,123,22)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="671.50"></text></g><g><title>[libc.so.6] (3,752,796 samples, 0.42%)</title><rect x="1.6945%" y="645" width="0.4171%" height="15" fill="rgb(231,138,38)" fg:x="15245068" fg:w="3752796"/><text x="1.9445%" y="655.50"></text></g><g><title>add_normal (3,740,442 samples, 0.42%)</title><rect x="4.6432%" y="821" width="0.4158%" height="15" fill="rgb(231,145,46)" fg:x="41773546" fg:w="3740442"/><text x="4.8932%" y="831.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (9,642,541 samples, 1.07%)</title><rect x="21.3224%" y="805" width="1.0718%" height="15" fill="rgb(251,118,11)" fg:x="191831013" fg:w="9642541"/><text x="21.5724%" y="815.50"></text></g><g><title>deref&lt;[chess_engine::search_masks::SingularData: 64], fn()  (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="805" width="0.4285%" height="15" fill="rgb(217,147,25)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="815.50"></text></g><g><title> [chess_engine::search_masks::SingularData: 64]&gt; (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="789" width="0.4285%" height="15" fill="rgb(247,81,37)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="799.50"></text></g><g><title>force&lt;[chess_engine::search_masks::SingularData: 64], fn()  (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="773" width="0.4285%" height="15" fill="rgb(209,12,38)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="783.50"></text></g><g><title> [chess_engine::search_masks::SingularData: 64]&gt; (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="757" width="0.4285%" height="15" fill="rgb(227,1,9)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="767.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;[chess_engine::search_masks::SingularData: 64], fn()  (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="741" width="0.4285%" height="15" fill="rgb(248,47,43)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="751.50"></text></g><g><title> [chess_engine::search_masks::SingularData: 64]&gt;&gt; (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="725" width="0.4285%" height="15" fill="rgb(221,10,30)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="735.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,854,785 samples, 0.43%)</title><rect x="22.3942%" y="709" width="0.4285%" height="15" fill="rgb(210,229,1)" fg:x="201473554" fg:w="3854785"/><text x="22.6442%" y="719.50"></text></g><g><title>deref&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="805" width="0.4160%" height="15" fill="rgb(222,148,37)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="815.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="789" width="0.4160%" height="15" fill="rgb(234,67,33)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="799.50"></text></g><g><title>force&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="773" width="0.4160%" height="15" fill="rgb(247,98,35)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="783.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="757" width="0.4160%" height="15" fill="rgb(247,138,52)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="767.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="741" width="0.4160%" height="15" fill="rgb(213,79,30)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="751.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt;&gt; (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="725" width="0.4160%" height="15" fill="rgb(246,177,23)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="735.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,742,221 samples, 0.42%)</title><rect x="22.8226%" y="709" width="0.4160%" height="15" fill="rgb(230,62,27)" fg:x="205328339" fg:w="3742221"/><text x="23.0726%" y="719.50"></text></g><g><title>deref&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="789" width="0.4167%" height="15" fill="rgb(216,154,8)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="799.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="773" width="0.4167%" height="15" fill="rgb(244,35,45)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="783.50"></text></g><g><title>force&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="757" width="0.4167%" height="15" fill="rgb(251,115,12)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="767.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="741" width="0.4167%" height="15" fill="rgb(240,54,50)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="751.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="725" width="0.4167%" height="15" fill="rgb(233,84,52)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="735.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt;&gt; (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="709" width="0.4167%" height="15" fill="rgb(207,117,47)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="719.50"></text></g><g><title>is_completed (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="693" width="0.4167%" height="15" fill="rgb(249,43,39)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="703.50"></text></g><g><title>load (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="677" width="0.4167%" height="15" fill="rgb(209,38,44)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="687.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,748,625 samples, 0.42%)</title><rect x="23.2386%" y="661" width="0.4167%" height="15" fill="rgb(236,212,23)" fg:x="209070560" fg:w="3748625"/><text x="23.4886%" y="671.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,842,374 samples, 0.43%)</title><rect x="23.6553%" y="661" width="0.4271%" height="15" fill="rgb(242,79,21)" fg:x="212819185" fg:w="3842374"/><text x="23.9053%" y="671.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="773" width="0.8443%" height="15" fill="rgb(211,96,35)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="783.50"></text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;, alloc::alloc::Global&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="757" width="0.8443%" height="15" fill="rgb(253,215,40)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="767.50"></text></g><g><title>extend_trusted&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="741" width="0.8443%" height="15" fill="rgb(211,81,21)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="751.50"></text></g><g><title>for_each&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="725" width="0.8443%" height="15" fill="rgb(208,190,38)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="735.50"></text></g><g><title>fold&lt;chess_engine::moving::Move, core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::moving::Move, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="709" width="0.8443%" height="15" fill="rgb(235,213,38)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="719.50"></text></g><g><title>fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;chess_engine::position::Position, chess_engine::moving::Move, (), chess_engine::search::find_bishop_with_magic::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::moving::Move, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt;&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="693" width="0.8443%" height="15" fill="rgb(237,122,38)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="703.50"></text></g><g><title>fold&lt;chess_engine::position::Position, (), core::iter::adapters::copied::copy_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;chess_engine::position::Position, chess_engine::moving::Move, (), chess_engine::search::find_bishop_with_magic::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::moving::Move, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt;&gt;&gt;&gt; (7,596,079 samples, 0.84%)</title><rect x="23.6553%" y="677" width="0.8443%" height="15" fill="rgb(244,218,35)" fg:x="212819185" fg:w="7596079"/><text x="23.9053%" y="687.50"></text></g><g><title>{closure#0}&lt;chess_engine::position::Position, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;chess_engine::position::Position, chess_engine::moving::Move, (), chess_engine::search::find_bishop_with_magic::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::moving::Move, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt;&gt;&gt; (3,753,705 samples, 0.42%)</title><rect x="24.0824%" y="661" width="0.4172%" height="15" fill="rgb(240,68,47)" fg:x="216661559" fg:w="3753705"/><text x="24.3324%" y="671.50"></text></g><g><title>{closure#0}&lt;chess_engine::position::Position, chess_engine::moving::Move, (), chess_engine::search::find_bishop_with_magic::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::moving::Move, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_bishop_with_magic::{closure_env#0}&gt;&gt;&gt;&gt; (3,753,705 samples, 0.42%)</title><rect x="24.0824%" y="645" width="0.4172%" height="15" fill="rgb(210,16,53)" fg:x="216661559" fg:w="3753705"/><text x="24.3324%" y="655.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,753,705 samples, 0.42%)</title><rect x="24.0824%" y="629" width="0.4172%" height="15" fill="rgb(235,124,12)" fg:x="216661559" fg:w="3753705"/><text x="24.3324%" y="639.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,253,154 samples, 0.36%)</title><rect x="24.4996%" y="757" width="0.3616%" height="15" fill="rgb(224,169,11)" fg:x="220415264" fg:w="3253154"/><text x="24.7496%" y="767.50"></text></g><g><title>get_bishop (6,982,448 samples, 0.78%)</title><rect x="24.4996%" y="773" width="0.7761%" height="15" fill="rgb(250,166,2)" fg:x="220415264" fg:w="6982448"/><text x="24.7496%" y="783.50"></text></g><g><title>get (3,729,294 samples, 0.41%)</title><rect x="24.8612%" y="757" width="0.4145%" height="15" fill="rgb(242,216,29)" fg:x="223668418" fg:w="3729294"/><text x="25.1112%" y="767.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,729,294 samples, 0.41%)</title><rect x="24.8612%" y="741" width="0.4145%" height="15" fill="rgb(230,116,27)" fg:x="223668418" fg:w="3729294"/><text x="25.1112%" y="751.50"></text></g><g><title>find_bishop (22,651,437 samples, 2.52%)</title><rect x="23.2386%" y="805" width="2.5178%" height="15" fill="rgb(228,99,48)" fg:x="209070560" fg:w="22651437"/><text x="23.4886%" y="815.50">fi..</text></g><g><title>find_bishop_with_magic (18,902,812 samples, 2.10%)</title><rect x="23.6553%" y="789" width="2.1011%" height="15" fill="rgb(253,11,6)" fg:x="212819185" fg:w="18902812"/><text x="23.9053%" y="799.50">f..</text></g><g><title>possible_takes (4,324,285 samples, 0.48%)</title><rect x="25.2757%" y="773" width="0.4807%" height="15" fill="rgb(247,143,39)" fg:x="227397712" fg:w="4324285"/><text x="25.5257%" y="783.50"></text></g><g><title>iter&lt;chess_engine::position::Position&gt; (4,324,285 samples, 0.48%)</title><rect x="25.2757%" y="757" width="0.4807%" height="15" fill="rgb(236,97,10)" fg:x="227397712" fg:w="4324285"/><text x="25.5257%" y="767.50"></text></g><g><title>new&lt;chess_engine::position::Position&gt; (4,324,285 samples, 0.48%)</title><rect x="25.2757%" y="741" width="0.4807%" height="15" fill="rgb(233,208,19)" fg:x="227397712" fg:w="4324285"/><text x="25.5257%" y="751.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (4,324,285 samples, 0.48%)</title><rect x="25.2757%" y="725" width="0.4807%" height="15" fill="rgb(216,164,2)" fg:x="227397712" fg:w="4324285"/><text x="25.5257%" y="735.50"></text></g><g><title>find_king (3,745,093 samples, 0.42%)</title><rect x="25.7563%" y="805" width="0.4163%" height="15" fill="rgb(220,129,5)" fg:x="231721997" fg:w="3745093"/><text x="26.0063%" y="815.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,741,051 samples, 0.42%)</title><rect x="26.1726%" y="741" width="0.4158%" height="15" fill="rgb(242,17,10)" fg:x="235467090" fg:w="3741051"/><text x="26.4226%" y="751.50"></text></g><g><title>next&lt;chess_engine::position::Position&gt; (3,773,433 samples, 0.42%)</title><rect x="26.5884%" y="661" width="0.4194%" height="15" fill="rgb(242,107,0)" fg:x="239208141" fg:w="3773433"/><text x="26.8384%" y="671.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,773,433 samples, 0.42%)</title><rect x="26.5884%" y="645" width="0.4194%" height="15" fill="rgb(251,28,31)" fg:x="239208141" fg:w="3773433"/><text x="26.8384%" y="655.50"></text></g><g><title>find_knight (11,269,895 samples, 1.25%)</title><rect x="26.1726%" y="805" width="1.2527%" height="15" fill="rgb(233,223,10)" fg:x="235467090" fg:w="11269895"/><text x="26.4226%" y="815.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;&gt; (11,269,895 samples, 1.25%)</title><rect x="26.1726%" y="789" width="1.2527%" height="15" fill="rgb(215,21,27)" fg:x="235467090" fg:w="11269895"/><text x="26.4226%" y="799.50"></text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;, alloc::alloc::Global&gt; (11,269,895 samples, 1.25%)</title><rect x="26.1726%" y="773" width="1.2527%" height="15" fill="rgb(232,23,21)" fg:x="235467090" fg:w="11269895"/><text x="26.4226%" y="783.50"></text></g><g><title>extend_desugared&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt;&gt; (11,269,895 samples, 1.25%)</title><rect x="26.1726%" y="757" width="1.2527%" height="15" fill="rgb(244,5,23)" fg:x="235467090" fg:w="11269895"/><text x="26.4226%" y="767.50"></text></g><g><title>next&lt;chess_engine::moving::Move, core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt;, chess_engine::search::find_knight::{closure_env#1}&gt; (7,528,844 samples, 0.84%)</title><rect x="26.5884%" y="741" width="0.8368%" height="15" fill="rgb(226,81,46)" fg:x="239208141" fg:w="7528844"/><text x="26.8384%" y="751.50"></text></g><g><title>next&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_knight::{closure_env#0}&gt; (7,528,844 samples, 0.84%)</title><rect x="26.5884%" y="725" width="0.8368%" height="15" fill="rgb(247,70,30)" fg:x="239208141" fg:w="7528844"/><text x="26.8384%" y="735.50"></text></g><g><title>find&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, &amp;mut chess_engine::search::find_knight::{closure_env#0}&gt; (7,528,844 samples, 0.84%)</title><rect x="26.5884%" y="709" width="0.8368%" height="15" fill="rgb(212,68,19)" fg:x="239208141" fg:w="7528844"/><text x="26.8384%" y="719.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_knight::{closure_env#0}&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (7,528,844 samples, 0.84%)</title><rect x="26.5884%" y="693" width="0.8368%" height="15" fill="rgb(240,187,13)" fg:x="239208141" fg:w="7528844"/><text x="26.8384%" y="703.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, (), core::iter::adapters::copied::copy_try_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_knight::{closure_env#0}&gt;&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (7,528,844 samples, 0.84%)</title><rect x="26.5884%" y="677" width="0.8368%" height="15" fill="rgb(223,113,26)" fg:x="239208141" fg:w="7528844"/><text x="26.8384%" y="687.50"></text></g><g><title>{closure#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_knight::{closure_env#0}&gt;&gt; (3,755,411 samples, 0.42%)</title><rect x="27.0079%" y="661" width="0.4174%" height="15" fill="rgb(206,192,2)" fg:x="242981574" fg:w="3755411"/><text x="27.2579%" y="671.50"></text></g><g><title>{closure#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_knight::{closure_env#0}&gt; (3,755,411 samples, 0.42%)</title><rect x="27.0079%" y="645" width="0.4174%" height="15" fill="rgb(241,108,4)" fg:x="242981574" fg:w="3755411"/><text x="27.2579%" y="655.50"></text></g><g><title>call_mut&lt;(&amp;chess_engine::position::Position), chess_engine::search::queen_unrestricted::{closure_env#1}&gt; (3,755,411 samples, 0.42%)</title><rect x="27.0079%" y="629" width="0.4174%" height="15" fill="rgb(247,173,49)" fg:x="242981574" fg:w="3755411"/><text x="27.2579%" y="639.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,755,411 samples, 0.42%)</title><rect x="27.0079%" y="613" width="0.4174%" height="15" fill="rgb(224,114,35)" fg:x="242981574" fg:w="3755411"/><text x="27.2579%" y="623.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (11,236,426 samples, 1.25%)</title><rect x="27.4253%" y="789" width="1.2490%" height="15" fill="rgb(245,159,27)" fg:x="246736985" fg:w="11236426"/><text x="27.6753%" y="799.50"></text></g><g><title>choose_relevant (3,720,166 samples, 0.41%)</title><rect x="28.6742%" y="789" width="0.4135%" height="15" fill="rgb(245,172,44)" fg:x="257973411" fg:w="3720166"/><text x="28.9242%" y="799.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,720,166 samples, 0.41%)</title><rect x="28.6742%" y="773" width="0.4135%" height="15" fill="rgb(236,23,11)" fg:x="257973411" fg:w="3720166"/><text x="28.9242%" y="783.50"></text></g><g><title>combined (3,752,842 samples, 0.42%)</title><rect x="29.0877%" y="789" width="0.4171%" height="15" fill="rgb(205,117,38)" fg:x="261693577" fg:w="3752842"/><text x="29.3377%" y="799.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (26,455,157 samples, 2.94%)</title><rect x="30.7534%" y="773" width="2.9405%" height="15" fill="rgb(237,72,25)" fg:x="276678603" fg:w="26455157"/><text x="31.0034%" y="783.50">ch..</text></g><g><title>gen_pawn_moves (3,835,404 samples, 0.43%)</title><rect x="33.6939%" y="773" width="0.4263%" height="15" fill="rgb(244,70,9)" fg:x="303133760" fg:w="3835404"/><text x="33.9439%" y="783.50"></text></g><g><title>push&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (3,835,404 samples, 0.43%)</title><rect x="33.6939%" y="757" width="0.4263%" height="15" fill="rgb(217,125,39)" fg:x="303133760" fg:w="3835404"/><text x="33.9439%" y="767.50"></text></g><g><title>chess_engine::search::gen_pawn_moves (3,835,404 samples, 0.43%)</title><rect x="33.6939%" y="741" width="0.4263%" height="15" fill="rgb(235,36,10)" fg:x="303133760" fg:w="3835404"/><text x="33.9439%" y="751.50"></text></g><g><title>find_pawn (67,935,619 samples, 7.55%)</title><rect x="27.4253%" y="805" width="7.5512%" height="15" fill="rgb(251,123,47)" fg:x="246736985" fg:w="67935619"/><text x="27.6753%" y="815.50">find_pawn</text></g><g><title>find_pawn_unrestricted (49,226,185 samples, 5.47%)</title><rect x="29.5049%" y="789" width="5.4716%" height="15" fill="rgb(221,13,13)" fg:x="265446419" fg:w="49226185"/><text x="29.7549%" y="799.50">find_pa..</text></g><g><title>next&lt;chess_engine::position::Position&gt; (7,703,440 samples, 0.86%)</title><rect x="34.1202%" y="773" width="0.8563%" height="15" fill="rgb(238,131,9)" fg:x="306969164" fg:w="7703440"/><text x="34.3702%" y="783.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (7,703,440 samples, 0.86%)</title><rect x="34.1202%" y="757" width="0.8563%" height="15" fill="rgb(211,50,8)" fg:x="306969164" fg:w="7703440"/><text x="34.3702%" y="767.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,843,030 samples, 0.43%)</title><rect x="34.9765%" y="757" width="0.4272%" height="15" fill="rgb(245,182,24)" fg:x="314672604" fg:w="3843030"/><text x="35.2265%" y="767.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,851,747 samples, 0.43%)</title><rect x="35.4036%" y="629" width="0.4281%" height="15" fill="rgb(242,14,37)" fg:x="318515634" fg:w="3851747"/><text x="35.6536%" y="639.50"></text></g><g><title>find_queen (11,532,925 samples, 1.28%)</title><rect x="34.9765%" y="805" width="1.2819%" height="15" fill="rgb(246,228,12)" fg:x="314672604" fg:w="11532925"/><text x="35.2265%" y="815.50"></text></g><g><title>find_queen_with_magic (11,532,925 samples, 1.28%)</title><rect x="34.9765%" y="789" width="1.2819%" height="15" fill="rgb(213,55,15)" fg:x="314672604" fg:w="11532925"/><text x="35.2265%" y="799.50"></text></g><g><title>queen_unrestricted (11,532,925 samples, 1.28%)</title><rect x="34.9765%" y="773" width="1.2819%" height="15" fill="rgb(209,9,3)" fg:x="314672604" fg:w="11532925"/><text x="35.2265%" y="783.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::queen_unrestricted::{closure_env#4}&gt;, chess_engine::search::queen_unrestricted::{closure_env#5}&gt;&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="757" width="0.8547%" height="15" fill="rgb(230,59,30)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="767.50"></text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::queen_unrestricted::{closure_env#4}&gt;, chess_engine::search::queen_unrestricted::{closure_env#5}&gt;, alloc::alloc::Global&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="741" width="0.8547%" height="15" fill="rgb(209,121,21)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="751.50"></text></g><g><title>extend_desugared&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::queen_unrestricted::{closure_env#4}&gt;, chess_engine::search::queen_unrestricted::{closure_env#5}&gt;&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="725" width="0.8547%" height="15" fill="rgb(220,109,13)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="735.50"></text></g><g><title>next&lt;chess_engine::moving::Move, core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::queen_unrestricted::{closure_env#4}&gt;, chess_engine::search::queen_unrestricted::{closure_env#5}&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="709" width="0.8547%" height="15" fill="rgb(232,18,1)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="719.50"></text></g><g><title>next&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::queen_unrestricted::{closure_env#4}&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="693" width="0.8547%" height="15" fill="rgb(215,41,42)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="703.50"></text></g><g><title>find&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, &amp;mut chess_engine::search::queen_unrestricted::{closure_env#4}&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="677" width="0.8547%" height="15" fill="rgb(224,123,36)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="687.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::queen_unrestricted::{closure_env#4}&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="661" width="0.8547%" height="15" fill="rgb(240,125,3)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="671.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, (), core::iter::adapters::copied::copy_try_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::queen_unrestricted::{closure_env#4}&gt;&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (7,689,895 samples, 0.85%)</title><rect x="35.4036%" y="645" width="0.8547%" height="15" fill="rgb(205,98,50)" fg:x="318515634" fg:w="7689895"/><text x="35.6536%" y="655.50"></text></g><g><title>next&lt;chess_engine::position::Position&gt; (3,838,148 samples, 0.43%)</title><rect x="35.8318%" y="629" width="0.4266%" height="15" fill="rgb(205,185,37)" fg:x="322367381" fg:w="3838148"/><text x="36.0818%" y="639.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,838,148 samples, 0.43%)</title><rect x="35.8318%" y="613" width="0.4266%" height="15" fill="rgb(238,207,15)" fg:x="322367381" fg:w="3838148"/><text x="36.0818%" y="623.50"></text></g><g><title>extend&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;, chess_engine::search::find_rook_with_magic::{closure_env#2}&gt;&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="773" width="1.7935%" height="15" fill="rgb(213,199,42)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="783.50">e..</text></g><g><title>spec_extend&lt;chess_engine::moving::Move, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;, chess_engine::search::find_rook_with_magic::{closure_env#2}&gt;, alloc::alloc::Global&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="757" width="1.7935%" height="15" fill="rgb(235,201,11)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="767.50">s..</text></g><g><title>extend_desugared&lt;chess_engine::moving::Move, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;, chess_engine::search::find_rook_with_magic::{closure_env#2}&gt;&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="741" width="1.7935%" height="15" fill="rgb(207,46,11)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="751.50">e..</text></g><g><title>next&lt;chess_engine::moving::Move, core::iter::adapters::filter::Filter&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;, chess_engine::search::find_rook_with_magic::{closure_env#2}&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="725" width="1.7935%" height="15" fill="rgb(241,35,35)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="735.50">n..</text></g><g><title>next&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search::find_rook_with_magic::{closure_env#1}&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="709" width="1.7935%" height="15" fill="rgb(243,32,47)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="719.50">n..</text></g><g><title>find&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, &amp;mut chess_engine::search::find_rook_with_magic::{closure_env#1}&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="693" width="1.7935%" height="15" fill="rgb(247,202,23)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="703.50">f..</text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="677" width="1.7935%" height="15" fill="rgb(219,102,11)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="687.50">t..</text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, (), core::iter::adapters::copied::copy_try_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search::find_rook_with_magic::{closure_env#1}&gt;&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="661" width="1.7935%" height="15" fill="rgb(243,110,44)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="671.50">t..</text></g><g><title>next&lt;chess_engine::position::Position&gt; (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="645" width="1.7935%" height="15" fill="rgb(222,74,54)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="655.50">n..</text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (16,135,797 samples, 1.79%)</title><rect x="36.2584%" y="629" width="1.7935%" height="15" fill="rgb(216,99,12)" fg:x="326205529" fg:w="16135797"/><text x="36.5084%" y="639.50">c..</text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (7,510,923 samples, 0.83%)</title><rect x="38.0519%" y="741" width="0.8349%" height="15" fill="rgb(226,22,26)" fg:x="342341326" fg:w="7510923"/><text x="38.3019%" y="751.50"></text></g><g><title>find_rook (27,466,348 samples, 3.05%)</title><rect x="36.2584%" y="805" width="3.0529%" height="15" fill="rgb(217,163,10)" fg:x="326205529" fg:w="27466348"/><text x="36.5084%" y="815.50">fin..</text></g><g><title>find_rook_with_magic (27,466,348 samples, 3.05%)</title><rect x="36.2584%" y="789" width="3.0529%" height="15" fill="rgb(213,25,53)" fg:x="326205529" fg:w="27466348"/><text x="36.5084%" y="799.50">fin..</text></g><g><title>get_rook (11,330,551 samples, 1.26%)</title><rect x="38.0519%" y="773" width="1.2594%" height="15" fill="rgb(252,105,26)" fg:x="342341326" fg:w="11330551"/><text x="38.3019%" y="783.50"></text></g><g><title>get (11,330,551 samples, 1.26%)</title><rect x="38.0519%" y="757" width="1.2594%" height="15" fill="rgb(220,39,43)" fg:x="342341326" fg:w="11330551"/><text x="38.3019%" y="767.50"></text></g><g><title>hash (3,819,628 samples, 0.42%)</title><rect x="38.8868%" y="741" width="0.4246%" height="15" fill="rgb(229,68,48)" fg:x="349852249" fg:w="3819628"/><text x="39.1368%" y="751.50"></text></g><g><title>hash (3,819,628 samples, 0.42%)</title><rect x="38.8868%" y="725" width="0.4246%" height="15" fill="rgb(252,8,32)" fg:x="349852249" fg:w="3819628"/><text x="39.1368%" y="735.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,819,628 samples, 0.42%)</title><rect x="38.8868%" y="709" width="0.4246%" height="15" fill="rgb(223,20,43)" fg:x="349852249" fg:w="3819628"/><text x="39.1368%" y="719.50"></text></g><g><title>next&lt;chess_engine::position::Position, core::ops::range::Range&lt;u8&gt;, fn(u8)  (3,834,892 samples, 0.43%)</title><rect x="39.3113%" y="805" width="0.4263%" height="15" fill="rgb(229,81,49)" fg:x="353671877" fg:w="3834892"/><text x="39.5613%" y="815.50"></text></g><g><title> chess_engine::position::Position&gt; (3,834,892 samples, 0.43%)</title><rect x="39.3113%" y="789" width="0.4263%" height="15" fill="rgb(236,28,36)" fg:x="353671877" fg:w="3834892"/><text x="39.5613%" y="799.50"></text></g><g><title>next&lt;u8&gt; (3,834,892 samples, 0.43%)</title><rect x="39.3113%" y="773" width="0.4263%" height="15" fill="rgb(249,185,26)" fg:x="353671877" fg:w="3834892"/><text x="39.5613%" y="783.50"></text></g><g><title>spec_next&lt;u8&gt; (3,834,892 samples, 0.43%)</title><rect x="39.3113%" y="757" width="0.4263%" height="15" fill="rgb(249,174,33)" fg:x="353671877" fg:w="3834892"/><text x="39.5613%" y="767.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (3,834,892 samples, 0.43%)</title><rect x="39.3113%" y="741" width="0.4263%" height="15" fill="rgb(233,201,37)" fg:x="353671877" fg:w="3834892"/><text x="39.5613%" y="751.50"></text></g><g><title>chess_engine::board::SearchBoard::find_all_moves (319,624,809 samples, 35.53%)</title><rect x="5.0590%" y="821" width="35.5269%" height="15" fill="rgb(221,78,26)" fg:x="45513988" fg:w="319624809"/><text x="5.3090%" y="831.50">chess_engine::board::SearchBoard::find_all_moves</text></g><g><title>with_capacity&lt;chess_engine::moving::Move&gt; (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="805" width="0.8483%" height="15" fill="rgb(250,127,30)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="815.50"></text></g><g><title>with_capacity_in&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="789" width="0.8483%" height="15" fill="rgb(230,49,44)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="799.50"></text></g><g><title>with_capacity_in&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="773" width="0.8483%" height="15" fill="rgb(229,67,23)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="783.50"></text></g><g><title>with_capacity_in&lt;alloc::alloc::Global&gt; (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="757" width="0.8483%" height="15" fill="rgb(249,83,47)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="767.50"></text></g><g><title>try_allocate_in&lt;alloc::alloc::Global&gt; (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="741" width="0.8483%" height="15" fill="rgb(215,43,3)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="751.50"></text></g><g><title>allocate (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="725" width="0.8483%" height="15" fill="rgb(238,154,13)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="735.50"></text></g><g><title>alloc_impl (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="709" width="0.8483%" height="15" fill="rgb(219,56,2)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="719.50"></text></g><g><title>alloc (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="693" width="0.8483%" height="15" fill="rgb(233,0,4)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="703.50"></text></g><g><title>__rustc::__rdl_alloc (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="677" width="0.8483%" height="15" fill="rgb(235,30,7)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="687.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="661" width="0.8483%" height="15" fill="rgb(250,79,13)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="671.50"></text></g><g><title>[libc.so.6] (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="645" width="0.8483%" height="15" fill="rgb(211,146,34)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="655.50"></text></g><g><title>[libc.so.6] (7,632,028 samples, 0.85%)</title><rect x="39.7376%" y="629" width="0.8483%" height="15" fill="rgb(228,22,38)" fg:x="357506769" fg:w="7632028"/><text x="39.9876%" y="639.50"></text></g><g><title>chess_engine::perft::perft_search (58,055,774 samples, 6.45%)</title><rect x="40.5859%" y="821" width="6.4530%" height="15" fill="rgb(235,168,5)" fg:x="365138797" fg:w="58055774"/><text x="40.8359%" y="831.50">chess_en..</text></g><g><title>drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess_engine::moving::Move, alloc::alloc::Global&gt;&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="821" width="1.3448%" height="15" fill="rgb(221,155,16)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="831.50"></text></g><g><title>drop&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="805" width="1.3448%" height="15" fill="rgb(215,215,53)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="815.50"></text></g><g><title>drop_in_place&lt;alloc::vec::into_iter::{impl#15}::drop::DropGuard&lt;chess_engine::moving::Move, alloc::alloc::Global&gt;&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="789" width="1.3448%" height="15" fill="rgb(223,4,10)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="799.50"></text></g><g><title>drop&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="773" width="1.3448%" height="15" fill="rgb(234,103,6)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="783.50"></text></g><g><title>drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess_engine::moving::Move, alloc::alloc::Global&gt;&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="757" width="1.3448%" height="15" fill="rgb(227,97,0)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="767.50"></text></g><g><title>drop&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="741" width="1.3448%" height="15" fill="rgb(234,150,53)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="751.50"></text></g><g><title>deallocate&lt;alloc::alloc::Global&gt; (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="725" width="1.3448%" height="15" fill="rgb(228,201,54)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="735.50"></text></g><g><title>deallocate (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="709" width="1.3448%" height="15" fill="rgb(222,22,37)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="719.50"></text></g><g><title>dealloc (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="693" width="1.3448%" height="15" fill="rgb(237,53,32)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="703.50"></text></g><g><title>__rustc::__rdl_dealloc (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="677" width="1.3448%" height="15" fill="rgb(233,25,53)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="687.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="661" width="1.3448%" height="15" fill="rgb(210,40,34)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="671.50"></text></g><g><title>[libc.so.6] (12,098,775 samples, 1.34%)</title><rect x="47.0389%" y="645" width="1.3448%" height="15" fill="rgb(241,220,44)" fg:x="423194571" fg:w="12098775"/><text x="47.2889%" y="655.50"></text></g><g><title>[libc.so.6] (3,836,131 samples, 0.43%)</title><rect x="47.9573%" y="629" width="0.4264%" height="15" fill="rgb(235,28,35)" fg:x="431457215" fg:w="3836131"/><text x="48.2073%" y="639.50"></text></g><g><title>[libc.so.6] (3,836,131 samples, 0.43%)</title><rect x="47.9573%" y="613" width="0.4264%" height="15" fill="rgb(210,56,17)" fg:x="431457215" fg:w="3836131"/><text x="48.2073%" y="623.50"></text></g><g><title>chess_engine::perft::perft_search (3,834,792 samples, 0.43%)</title><rect x="48.3837%" y="805" width="0.4262%" height="15" fill="rgb(224,130,29)" fg:x="435293346" fg:w="3834792"/><text x="48.6337%" y="815.50"></text></g><g><title>chess_engine::perft::perft_search (3,811,975 samples, 0.42%)</title><rect x="48.8099%" y="789" width="0.4237%" height="15" fill="rgb(235,212,8)" fg:x="439128138" fg:w="3811975"/><text x="49.0599%" y="799.50"></text></g><g><title>deref&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="789" width="0.4276%" height="15" fill="rgb(223,33,50)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="799.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="773" width="0.4276%" height="15" fill="rgb(219,149,13)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="783.50"></text></g><g><title>force&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="757" width="0.4276%" height="15" fill="rgb(250,156,29)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="767.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="741" width="0.4276%" height="15" fill="rgb(216,193,19)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="751.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="725" width="0.4276%" height="15" fill="rgb(216,135,14)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="735.50"></text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt;&gt; (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="709" width="0.4276%" height="15" fill="rgb(241,47,5)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="719.50"></text></g><g><title>is_completed (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="693" width="0.4276%" height="15" fill="rgb(233,42,35)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="703.50"></text></g><g><title>load (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="677" width="0.4276%" height="15" fill="rgb(231,13,6)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="687.50"></text></g><g><title>chess_engine::perft::perft_search (3,846,651 samples, 0.43%)</title><rect x="49.2337%" y="661" width="0.4276%" height="15" fill="rgb(207,181,40)" fg:x="442940113" fg:w="3846651"/><text x="49.4837%" y="671.50"></text></g><g><title>chess_engine::perft::perft_search (11,276,835 samples, 1.25%)</title><rect x="50.5014%" y="773" width="1.2534%" height="15" fill="rgb(254,173,49)" fg:x="454345751" fg:w="11276835"/><text x="50.7514%" y="783.50"></text></g><g><title>get_bishop (7,573,570 samples, 0.84%)</title><rect x="51.7549%" y="773" width="0.8418%" height="15" fill="rgb(221,1,38)" fg:x="465622586" fg:w="7573570"/><text x="52.0049%" y="783.50"></text></g><g><title>get (7,573,570 samples, 0.84%)</title><rect x="51.7549%" y="757" width="0.8418%" height="15" fill="rgb(206,124,46)" fg:x="465622586" fg:w="7573570"/><text x="52.0049%" y="767.50"></text></g><g><title>chess_engine::perft::perft_search (7,573,570 samples, 0.84%)</title><rect x="51.7549%" y="741" width="0.8418%" height="15" fill="rgb(249,21,11)" fg:x="465622586" fg:w="7573570"/><text x="52.0049%" y="751.50"></text></g><g><title>chess_engine::perft::perft_search (3,752,677 samples, 0.42%)</title><rect x="52.5967%" y="741" width="0.4171%" height="15" fill="rgb(222,201,40)" fg:x="473196156" fg:w="3752677"/><text x="52.8467%" y="751.50"></text></g><g><title>get_rook (11,180,870 samples, 1.24%)</title><rect x="52.5967%" y="773" width="1.2428%" height="15" fill="rgb(235,61,29)" fg:x="473196156" fg:w="11180870"/><text x="52.8467%" y="783.50"></text></g><g><title>get (11,180,870 samples, 1.24%)</title><rect x="52.5967%" y="757" width="1.2428%" height="15" fill="rgb(219,207,3)" fg:x="473196156" fg:w="11180870"/><text x="52.8467%" y="767.50"></text></g><g><title>hash (7,428,193 samples, 0.83%)</title><rect x="53.0138%" y="741" width="0.8257%" height="15" fill="rgb(222,56,46)" fg:x="476948833" fg:w="7428193"/><text x="53.2638%" y="751.50"></text></g><g><title>hash (7,428,192 samples, 0.83%)</title><rect x="53.0138%" y="725" width="0.8257%" height="15" fill="rgb(239,76,54)" fg:x="476948834" fg:w="7428192"/><text x="53.2638%" y="735.50"></text></g><g><title>chess_engine::perft::perft_search (7,428,192 samples, 0.83%)</title><rect x="53.0138%" y="709" width="0.8257%" height="15" fill="rgb(231,124,27)" fg:x="476948834" fg:w="7428192"/><text x="53.2638%" y="719.50"></text></g><g><title>next&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, chess_engine::search_data::{impl#3}::find_with::{closure_env#4}&gt; (3,737,419 samples, 0.42%)</title><rect x="53.8394%" y="773" width="0.4154%" height="15" fill="rgb(249,195,6)" fg:x="484377026" fg:w="3737419"/><text x="54.0894%" y="783.50"></text></g><g><title>find&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;&gt;, &amp;mut chess_engine::search_data::{impl#3}::find_with::{closure_env#4}&gt; (3,737,419 samples, 0.42%)</title><rect x="53.8394%" y="757" width="0.4154%" height="15" fill="rgb(237,174,47)" fg:x="484377026" fg:w="3737419"/><text x="54.0894%" y="767.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, chess_engine::position::Position, (), core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search_data::{impl#3}::find_with::{closure_env#4}&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (3,737,419 samples, 0.42%)</title><rect x="53.8394%" y="741" width="0.4154%" height="15" fill="rgb(206,201,31)" fg:x="484377026" fg:w="3737419"/><text x="54.0894%" y="751.50"></text></g><g><title>try_fold&lt;core::slice::iter::Iter&lt;chess_engine::position::Position&gt;, (), core::iter::adapters::copied::copy_try_fold::{closure_env#0}&lt;chess_engine::position::Position, (), core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;, core::iter::traits::iterator::Iterator::find::check::{closure_env#0}&lt;chess_engine::position::Position, &amp;mut chess_engine::search_data::{impl#3}::find_with::{closure_env#4}&gt;&gt;, core::ops::control_flow::ControlFlow&lt;chess_engine::position::Position, ()&gt;&gt; (3,737,419 samples, 0.42%)</title><rect x="53.8394%" y="725" width="0.4154%" height="15" fill="rgb(231,57,52)" fg:x="484377026" fg:w="3737419"/><text x="54.0894%" y="735.50"></text></g><g><title>chess_engine::perft::perft_search (3,737,419 samples, 0.42%)</title><rect x="53.8394%" y="709" width="0.4154%" height="15" fill="rgb(248,177,22)" fg:x="484377026" fg:w="3737419"/><text x="54.0894%" y="719.50"></text></g><g><title>legal_data (56,666,489 samples, 6.30%)</title><rect x="48.3837%" y="821" width="6.2986%" height="15" fill="rgb(215,211,37)" fg:x="435293346" fg:w="56666489"/><text x="48.6337%" y="831.50">legal_da..</text></g><g><title>find (52,831,697 samples, 5.87%)</title><rect x="48.8099%" y="805" width="5.8723%" height="15" fill="rgb(241,128,51)" fg:x="439128138" fg:w="52831697"/><text x="49.0599%" y="815.50">find</text></g><g><title>find_with (45,173,071 samples, 5.02%)</title><rect x="49.6612%" y="789" width="5.0211%" height="15" fill="rgb(227,165,31)" fg:x="446786764" fg:w="45173071"/><text x="49.9112%" y="799.50">find_w..</text></g><g><title>next&lt;core::slice::iter::Iter&lt;u64&gt;, u64&gt; (3,845,390 samples, 0.43%)</title><rect x="54.2549%" y="773" width="0.4274%" height="15" fill="rgb(228,167,24)" fg:x="488114445" fg:w="3845390"/><text x="54.5049%" y="783.50"></text></g><g><title>next&lt;u64&gt; (3,845,390 samples, 0.43%)</title><rect x="54.2549%" y="757" width="0.4274%" height="15" fill="rgb(228,143,12)" fg:x="488114445" fg:w="3845390"/><text x="54.5049%" y="767.50"></text></g><g><title>chess_engine::perft::perft_search (3,845,390 samples, 0.43%)</title><rect x="54.2549%" y="741" width="0.4274%" height="15" fill="rgb(249,149,8)" fg:x="488114445" fg:w="3845390"/><text x="54.5049%" y="751.50"></text></g><g><title>chess_engine::perft::perft_search (86,680,070 samples, 9.63%)</title><rect x="61.0096%" y="805" width="9.6347%" height="15" fill="rgb(243,35,44)" fg:x="548884946" fg:w="86680070"/><text x="61.2596%" y="815.50">chess_engine::..</text></g><g><title>[unknown] (3,752,275 samples, 0.42%)</title><rect x="70.2272%" y="789" width="0.4171%" height="15" fill="rgb(246,89,9)" fg:x="631812741" fg:w="3752275"/><text x="70.4772%" y="799.50"></text></g><g><title>choose_home_rook (7,570,846 samples, 0.84%)</title><rect x="70.6443%" y="805" width="0.8415%" height="15" fill="rgb(233,213,13)" fg:x="635565016" fg:w="7570846"/><text x="70.8943%" y="815.50"></text></g><g><title>chess_engine::perft::perft_search (11,117,678 samples, 1.24%)</title><rect x="73.9862%" y="789" width="1.2358%" height="15" fill="rgb(233,141,41)" fg:x="665631538" fg:w="11117678"/><text x="74.2362%" y="799.50"></text></g><g><title>chess_engine::perft::perft_search (3,841,421 samples, 0.43%)</title><rect x="75.2220%" y="693" width="0.4270%" height="15" fill="rgb(239,167,4)" fg:x="676749216" fg:w="3841421"/><text x="75.4720%" y="703.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::zobrist::ZobristRandom, fn()  (7,586,063 samples, 0.84%)</title><rect x="75.2220%" y="725" width="0.8432%" height="15" fill="rgb(209,217,16)" fg:x="676749216" fg:w="7586063"/><text x="75.4720%" y="735.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt;&gt; (7,586,063 samples, 0.84%)</title><rect x="75.2220%" y="709" width="0.8432%" height="15" fill="rgb(219,88,35)" fg:x="676749216" fg:w="7586063"/><text x="75.4720%" y="719.50"></text></g><g><title>is_completed (3,744,642 samples, 0.42%)</title><rect x="75.6490%" y="693" width="0.4162%" height="15" fill="rgb(220,193,23)" fg:x="680590637" fg:w="3744642"/><text x="75.8990%" y="703.50"></text></g><g><title>deref&lt;chess_engine::zobrist::ZobristRandom, fn()  (11,334,902 samples, 1.26%)</title><rect x="75.2220%" y="789" width="1.2599%" height="15" fill="rgb(230,90,52)" fg:x="676749216" fg:w="11334902"/><text x="75.4720%" y="799.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (11,334,902 samples, 1.26%)</title><rect x="75.2220%" y="773" width="1.2599%" height="15" fill="rgb(252,106,19)" fg:x="676749216" fg:w="11334902"/><text x="75.4720%" y="783.50"></text></g><g><title>force&lt;chess_engine::zobrist::ZobristRandom, fn()  (11,334,902 samples, 1.26%)</title><rect x="75.2220%" y="757" width="1.2599%" height="15" fill="rgb(206,74,20)" fg:x="676749216" fg:w="11334902"/><text x="75.4720%" y="767.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (11,334,902 samples, 1.26%)</title><rect x="75.2220%" y="741" width="1.2599%" height="15" fill="rgb(230,138,44)" fg:x="676749216" fg:w="11334902"/><text x="75.4720%" y="751.50"></text></g><g><title>chess_engine::perft::perft_search (3,748,839 samples, 0.42%)</title><rect x="76.0652%" y="725" width="0.4167%" height="15" fill="rgb(235,182,43)" fg:x="684335279" fg:w="3748839"/><text x="76.3152%" y="735.50"></text></g><g><title>update (71,345,488 samples, 7.93%)</title><rect x="71.4858%" y="805" width="7.9302%" height="15" fill="rgb(242,16,51)" fg:x="643135862" fg:w="71345488"/><text x="71.7358%" y="815.50">update</text></g><g><title>get_value (26,397,232 samples, 2.93%)</title><rect x="76.4819%" y="789" width="2.9341%" height="15" fill="rgb(248,9,4)" fg:x="688084118" fg:w="26397232"/><text x="76.7319%" y="799.50">ge..</text></g><g><title>chess_engine::perft::perft_search (7,584,952 samples, 0.84%)</title><rect x="79.4160%" y="789" width="0.8431%" height="15" fill="rgb(210,31,22)" fg:x="714481350" fg:w="7584952"/><text x="79.6660%" y="799.50"></text></g><g><title>update_ep_square (12,989,551 samples, 1.44%)</title><rect x="79.4160%" y="805" width="1.4438%" height="15" fill="rgb(239,54,39)" fg:x="714481350" fg:w="12989551"/><text x="79.6660%" y="815.50"></text></g><g><title>update (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="789" width="0.6007%" height="15" fill="rgb(230,99,41)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="799.50"></text></g><g><title>deref&lt;chess_engine::zobrist::ZobristRandom, fn()  (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="773" width="0.6007%" height="15" fill="rgb(253,106,12)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="783.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="757" width="0.6007%" height="15" fill="rgb(213,46,41)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="767.50"></text></g><g><title>force&lt;chess_engine::zobrist::ZobristRandom, fn()  (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="741" width="0.6007%" height="15" fill="rgb(215,133,35)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="751.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="725" width="0.6007%" height="15" fill="rgb(213,28,5)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="735.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::zobrist::ZobristRandom, fn()  (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="709" width="0.6007%" height="15" fill="rgb(215,77,49)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="719.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt;&gt; (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="693" width="0.6007%" height="15" fill="rgb(248,100,22)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="703.50"></text></g><g><title>is_completed (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="677" width="0.6007%" height="15" fill="rgb(208,67,9)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="687.50"></text></g><g><title>load (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="661" width="0.6007%" height="15" fill="rgb(219,133,21)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="671.50"></text></g><g><title>chess_engine::perft::perft_search (5,404,599 samples, 0.60%)</title><rect x="80.2591%" y="645" width="0.6007%" height="15" fill="rgb(246,46,29)" fg:x="722066302" fg:w="5404599"/><text x="80.5091%" y="655.50"></text></g><g><title>make (239,340,197 samples, 26.60%)</title><rect x="54.6823%" y="821" width="26.6031%" height="15" fill="rgb(246,185,52)" fg:x="491959835" fg:w="239340197"/><text x="54.9323%" y="831.50">make</text></g><g><title>update_long_castle (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="805" width="0.4256%" height="15" fill="rgb(252,136,11)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="815.50"></text></g><g><title>deref&lt;chess_engine::zobrist::ZobristRandom, fn()  (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="789" width="0.4256%" height="15" fill="rgb(219,138,53)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="799.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="773" width="0.4256%" height="15" fill="rgb(211,51,23)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="783.50"></text></g><g><title>force&lt;chess_engine::zobrist::ZobristRandom, fn()  (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="757" width="0.4256%" height="15" fill="rgb(247,221,28)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="767.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt; (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="741" width="0.4256%" height="15" fill="rgb(251,222,45)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="751.50"></text></g><g><title>call_once&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::zobrist::ZobristRandom, fn()  (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="725" width="0.4256%" height="15" fill="rgb(217,162,53)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="735.50"></text></g><g><title> chess_engine::zobrist::ZobristRandom&gt;&gt; (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="709" width="0.4256%" height="15" fill="rgb(229,93,14)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="719.50"></text></g><g><title>is_completed (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="693" width="0.4256%" height="15" fill="rgb(209,67,49)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="703.50"></text></g><g><title>load (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="677" width="0.4256%" height="15" fill="rgb(213,87,29)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="687.50"></text></g><g><title>chess_engine::perft::perft_search (3,829,131 samples, 0.43%)</title><rect x="80.8598%" y="661" width="0.4256%" height="15" fill="rgb(205,151,52)" fg:x="727470901" fg:w="3829131"/><text x="81.1098%" y="671.50"></text></g><g><title>new (18,865,403 samples, 2.10%)</title><rect x="81.2854%" y="821" width="2.0969%" height="15" fill="rgb(253,215,39)" fg:x="731300032" fg:w="18865403"/><text x="81.5354%" y="831.50">n..</text></g><g><title>chess_engine::perft::perft_search (7,561,579 samples, 0.84%)</title><rect x="83.3823%" y="789" width="0.8405%" height="15" fill="rgb(221,220,41)" fg:x="750165435" fg:w="7561579"/><text x="83.6323%" y="799.50"></text></g><g><title>next&lt;chess_engine::moving::Move, alloc::alloc::Global&gt; (15,054,433 samples, 1.67%)</title><rect x="83.3823%" y="821" width="1.6733%" height="15" fill="rgb(218,133,21)" fg:x="750165435" fg:w="15054433"/><text x="83.6323%" y="831.50"></text></g><g><title>read&lt;chess_engine::moving::Move&gt; (15,054,433 samples, 1.67%)</title><rect x="83.3823%" y="805" width="1.6733%" height="15" fill="rgb(221,193,43)" fg:x="750165435" fg:w="15054433"/><text x="83.6323%" y="815.50"></text></g><g><title>read&lt;chess_engine::moving::Move&gt; (7,492,854 samples, 0.83%)</title><rect x="84.2228%" y="789" width="0.8328%" height="15" fill="rgb(240,128,52)" fg:x="757727014" fg:w="7492854"/><text x="84.4728%" y="799.50"></text></g><g><title>chess_engine::perft::perft_search (9,447,034 samples, 1.05%)</title><rect x="88.4206%" y="805" width="1.0501%" height="15" fill="rgb(253,114,12)" fg:x="795493117" fg:w="9447034"/><text x="88.6706%" y="815.50"></text></g><g><title>chess_engine::perft::perft_search (789,691,963 samples, 87.78%)</title><rect x="2.1116%" y="837" width="87.7758%" height="15" fill="rgb(215,223,47)" fg:x="18997864" fg:w="789691963"/><text x="2.3616%" y="847.50">chess_engine::perft::perft_search</text></g><g><title>unmake (43,469,959 samples, 4.83%)</title><rect x="85.0557%" y="821" width="4.8318%" height="15" fill="rgb(248,225,23)" fg:x="765219868" fg:w="43469959"/><text x="85.3057%" y="831.50">unmake</text></g><g><title>opposite (3,749,676 samples, 0.42%)</title><rect x="89.4707%" y="805" width="0.4168%" height="15" fill="rgb(250,108,0)" fg:x="804940151" fg:w="3749676"/><text x="89.7207%" y="815.50"></text></g><g><title>chess_engine::perft::perft_search (3,744,657 samples, 0.42%)</title><rect x="89.8874%" y="821" width="0.4162%" height="15" fill="rgb(228,208,7)" fg:x="808689827" fg:w="3744657"/><text x="90.1374%" y="831.50"></text></g><g><title>make (11,323,903 samples, 1.26%)</title><rect x="89.8874%" y="837" width="1.2587%" height="15" fill="rgb(244,45,10)" fg:x="808689827" fg:w="11323903"/><text x="90.1374%" y="847.50"></text></g><g><title>update (7,579,246 samples, 0.84%)</title><rect x="90.3037%" y="821" width="0.8424%" height="15" fill="rgb(207,125,25)" fg:x="812434484" fg:w="7579246"/><text x="90.5537%" y="831.50"></text></g><g><title>perft_search&lt;5&gt; (2,993,258 samples, 0.33%)</title><rect x="91.1461%" y="837" width="0.3327%" height="15" fill="rgb(210,195,18)" fg:x="820013730" fg:w="2993258"/><text x="91.3961%" y="847.50"></text></g><g><title>make (2,993,258 samples, 0.33%)</title><rect x="91.1461%" y="821" width="0.3327%" height="15" fill="rgb(249,80,12)" fg:x="820013730" fg:w="2993258"/><text x="91.3961%" y="831.50"></text></g><g><title>chess_engine::perft::perft_search (2,993,258 samples, 0.33%)</title><rect x="91.1461%" y="805" width="0.3327%" height="15" fill="rgb(221,65,9)" fg:x="820013730" fg:w="2993258"/><text x="91.3961%" y="815.50"></text></g><g><title>chess_engine::main (830,213,394 samples, 92.28%)</title><rect x="0.0303%" y="917" width="92.2798%" height="15" fill="rgb(235,49,36)" fg:x="272263" fg:w="830213394"/><text x="0.2803%" y="927.50">chess_engine::main</text></g><g><title>chess_engine::perft::perft_search (830,213,394 samples, 92.28%)</title><rect x="0.0303%" y="901" width="92.2798%" height="15" fill="rgb(225,32,20)" fg:x="272263" fg:w="830213394"/><text x="0.2803%" y="911.50">chess_engine::perft::perft_search</text></g><g><title>chess_engine::perft::perft_search (830,213,394 samples, 92.28%)</title><rect x="0.0303%" y="885" width="92.2798%" height="15" fill="rgb(215,141,46)" fg:x="272263" fg:w="830213394"/><text x="0.2803%" y="895.50">chess_engine::perft::perft_search</text></g><g><title>chess_engine::perft::perft_search (830,213,394 samples, 92.28%)</title><rect x="0.0303%" y="869" width="92.2798%" height="15" fill="rgb(250,160,47)" fg:x="272263" fg:w="830213394"/><text x="0.2803%" y="879.50">chess_engine::perft::perft_search</text></g><g><title>chess_engine::perft::perft_search (830,213,394 samples, 92.28%)</title><rect x="0.0303%" y="853" width="92.2798%" height="15" fill="rgb(216,222,40)" fg:x="272263" fg:w="830213394"/><text x="0.2803%" y="863.50">chess_engine::perft::perft_search</text></g><g><title>unmake (7,478,669 samples, 0.83%)</title><rect x="91.4788%" y="837" width="0.8313%" height="15" fill="rgb(234,217,39)" fg:x="823006988" fg:w="7478669"/><text x="91.7288%" y="847.50"></text></g><g><title>chess_engine::perft::perft_search (3,725,090 samples, 0.41%)</title><rect x="91.8960%" y="821" width="0.4141%" height="15" fill="rgb(207,178,40)" fg:x="826760567" fg:w="3725090"/><text x="92.1460%" y="831.50"></text></g><g><title>add_end (1,341,094 samples, 0.15%)</title><rect x="93.2917%" y="261" width="0.1491%" height="15" fill="rgb(221,136,13)" fg:x="839316918" fg:w="1341094"/><text x="93.5417%" y="271.50"></text></g><g><title>push&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (1,341,094 samples, 0.15%)</title><rect x="93.2917%" y="245" width="0.1491%" height="15" fill="rgb(249,199,10)" fg:x="839316918" fg:w="1341094"/><text x="93.5417%" y="255.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (1,341,094 samples, 0.15%)</title><rect x="93.2917%" y="229" width="0.1491%" height="15" fill="rgb(249,222,13)" fg:x="839316918" fg:w="1341094"/><text x="93.5417%" y="239.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (2,681,043 samples, 0.30%)</title><rect x="93.4408%" y="261" width="0.2980%" height="15" fill="rgb(244,185,38)" fg:x="840658012" fg:w="2681043"/><text x="93.6908%" y="271.50"></text></g><g><title>chess_engine::position::Position::with_offset (2,556,390 samples, 0.28%)</title><rect x="94.2136%" y="229" width="0.2841%" height="15" fill="rgb(236,202,9)" fg:x="847611153" fg:w="2556390"/><text x="94.4636%" y="239.50"></text></g><g><title>chess_engine::position::Position::with_offset (8,321,574 samples, 0.92%)</title><rect x="93.7388%" y="261" width="0.9250%" height="15" fill="rgb(250,229,37)" fg:x="843339055" fg:w="8321574"/><text x="93.9888%" y="271.50"></text></g><g><title>add_x (4,049,476 samples, 0.45%)</title><rect x="94.2136%" y="245" width="0.4501%" height="15" fill="rgb(206,174,23)" fg:x="847611153" fg:w="4049476"/><text x="94.4636%" y="255.50"></text></g><g><title>with_x (1,493,086 samples, 0.17%)</title><rect x="94.4978%" y="229" width="0.1660%" height="15" fill="rgb(211,33,43)" fg:x="850167543" fg:w="1493086"/><text x="94.7478%" y="239.50"></text></g><g><title>chess_engine::position::Position::with_offset (1,493,086 samples, 0.17%)</title><rect x="94.4978%" y="213" width="0.1660%" height="15" fill="rgb(245,58,50)" fg:x="850167543" fg:w="1493086"/><text x="94.7478%" y="223.50"></text></g><g><title>finalize (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="261" width="0.2864%" height="15" fill="rgb(244,68,36)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="271.50"></text></g><g><title>into_boxed_slice&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="245" width="0.2864%" height="15" fill="rgb(232,229,15)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="255.50"></text></g><g><title>shrink_to_fit&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="229" width="0.2864%" height="15" fill="rgb(254,30,23)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="239.50"></text></g><g><title>shrink_to_fit&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="213" width="0.2864%" height="15" fill="rgb(235,160,14)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="223.50"></text></g><g><title>shrink_to_fit&lt;alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="197" width="0.2864%" height="15" fill="rgb(212,155,44)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="207.50"></text></g><g><title>shrink&lt;alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="181" width="0.2864%" height="15" fill="rgb(226,2,50)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="191.50"></text></g><g><title>shrink_unchecked&lt;alloc::alloc::Global&gt; (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="165" width="0.2864%" height="15" fill="rgb(234,177,6)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="175.50"></text></g><g><title>shrink (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="149" width="0.2864%" height="15" fill="rgb(217,24,9)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="159.50"></text></g><g><title>realloc (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="133" width="0.2864%" height="15" fill="rgb(220,13,46)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="117" width="0.2864%" height="15" fill="rgb(239,221,27)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="101" width="0.2864%" height="15" fill="rgb(222,198,25)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="111.50"></text></g><g><title>realloc (2,577,072 samples, 0.29%)</title><rect x="94.6637%" y="85" width="0.2864%" height="15" fill="rgb(211,99,13)" fg:x="851660629" fg:w="2577072"/><text x="94.9137%" y="95.50"></text></g><g><title>[libc.so.6] (1,453,403 samples, 0.16%)</title><rect x="94.7886%" y="69" width="0.1615%" height="15" fill="rgb(232,111,31)" fg:x="852784298" fg:w="1453403"/><text x="95.0386%" y="79.50"></text></g><g><title>mul (1,491,148 samples, 0.17%)</title><rect x="94.9502%" y="261" width="0.1657%" height="15" fill="rgb(245,82,37)" fg:x="854237701" fg:w="1491148"/><text x="95.2002%" y="271.50"></text></g><g><title>in_range (1,491,148 samples, 0.17%)</title><rect x="94.9502%" y="245" width="0.1657%" height="15" fill="rgb(227,149,46)" fg:x="854237701" fg:w="1491148"/><text x="95.2002%" y="255.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (1,491,148 samples, 0.17%)</title><rect x="94.9502%" y="229" width="0.1657%" height="15" fill="rgb(218,36,50)" fg:x="854237701" fg:w="1491148"/><text x="95.2002%" y="239.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (31,045,742 samples, 3.45%)</title><rect x="92.3101%" y="277" width="3.4508%" height="15" fill="rgb(226,80,48)" fg:x="830485657" fg:w="31045742"/><text x="92.5601%" y="287.50">che..</text></g><g><title>unwrap&lt;chess_engine::position::Offset&gt; (5,802,550 samples, 0.64%)</title><rect x="95.1159%" y="261" width="0.6450%" height="15" fill="rgb(238,224,15)" fg:x="855728849" fg:w="5802550"/><text x="95.3659%" y="271.50"></text></g><g><title>add_end (3,422,020 samples, 0.38%)</title><rect x="95.7609%" y="261" width="0.3804%" height="15" fill="rgb(241,136,10)" fg:x="861531399" fg:w="3422020"/><text x="96.0109%" y="271.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (3,422,020 samples, 0.38%)</title><rect x="95.7609%" y="245" width="0.3804%" height="15" fill="rgb(208,32,45)" fg:x="861531399" fg:w="3422020"/><text x="96.0109%" y="255.50"></text></g><g><title>[libc.so.6] (16,623,802 samples, 1.85%)</title><rect x="96.1412%" y="85" width="1.8478%" height="15" fill="rgb(207,135,9)" fg:x="864953419" fg:w="16623802"/><text x="96.3912%" y="95.50">[..</text></g><g><title>[libc.so.6] (13,065,921 samples, 1.45%)</title><rect x="96.5367%" y="69" width="1.4523%" height="15" fill="rgb(206,86,44)" fg:x="868511300" fg:w="13065921"/><text x="96.7867%" y="79.50"></text></g><g><title>[unknown] (2,456,715 samples, 0.27%)</title><rect x="97.7159%" y="53" width="0.2731%" height="15" fill="rgb(245,177,15)" fg:x="879120506" fg:w="2456715"/><text x="97.9659%" y="63.50"></text></g><g><title>[unknown] (2,456,715 samples, 0.27%)</title><rect x="97.7159%" y="37" width="0.2731%" height="15" fill="rgb(206,64,50)" fg:x="879120506" fg:w="2456715"/><text x="97.9659%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once (53,357,581 samples, 5.93%)</title><rect x="92.3101%" y="293" width="5.9308%" height="15" fill="rgb(234,36,40)" fg:x="830485657" fg:w="53357581"/><text x="92.5601%" y="303.50">core::op..</text></g><g><title>slide_blocker_possible_moves&lt;4&gt; (22,311,839 samples, 2.48%)</title><rect x="95.7609%" y="277" width="2.4800%" height="15" fill="rgb(213,64,8)" fg:x="861531399" fg:w="22311839"/><text x="96.0109%" y="287.50">sl..</text></g><g><title>new (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="261" width="2.0996%" height="15" fill="rgb(210,75,36)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="271.50">n..</text></g><g><title>with_capacity&lt;chess_engine::position::Position&gt; (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="245" width="2.0996%" height="15" fill="rgb(229,88,21)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="255.50">w..</text></g><g><title>with_capacity_in&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="229" width="2.0996%" height="15" fill="rgb(252,204,47)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="239.50">w..</text></g><g><title>with_capacity_in&lt;chess_engine::position::Position, alloc::alloc::Global&gt; (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="213" width="2.0996%" height="15" fill="rgb(208,77,27)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="223.50">w..</text></g><g><title>with_capacity_in&lt;alloc::alloc::Global&gt; (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="197" width="2.0996%" height="15" fill="rgb(221,76,26)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="207.50">w..</text></g><g><title>try_allocate_in&lt;alloc::alloc::Global&gt; (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="181" width="2.0996%" height="15" fill="rgb(225,139,18)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="191.50">t..</text></g><g><title>allocate (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="165" width="2.0996%" height="15" fill="rgb(230,137,11)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="175.50">a..</text></g><g><title>alloc_impl (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="149" width="2.0996%" height="15" fill="rgb(212,28,1)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="159.50">a..</text></g><g><title>alloc (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="133" width="2.0996%" height="15" fill="rgb(248,164,17)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="143.50">a..</text></g><g><title>__rustc::__rdl_alloc (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="117" width="2.0996%" height="15" fill="rgb(222,171,42)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="127.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18,889,819 samples, 2.10%)</title><rect x="96.1412%" y="101" width="2.0996%" height="15" fill="rgb(243,84,45)" fg:x="864953419" fg:w="18889819"/><text x="96.3912%" y="111.50">s..</text></g><g><title>malloc (2,266,017 samples, 0.25%)</title><rect x="97.9890%" y="85" width="0.2519%" height="15" fill="rgb(252,49,23)" fg:x="881577221" fg:w="2266017"/><text x="98.2390%" y="95.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,535,344 samples, 0.28%)</title><rect x="98.2409%" y="261" width="0.2818%" height="15" fill="rgb(215,19,7)" fg:x="883843238" fg:w="2535344"/><text x="98.4909%" y="271.50"></text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;, alloc::vec::Vec&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="453" width="6.5202%" height="15" fill="rgb(238,81,41)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="463.50">collect&lt;c..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="437" width="6.5202%" height="15" fill="rgb(210,199,37)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="447.50">from_iter..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="421" width="6.5202%" height="15" fill="rgb(244,192,49)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="431.50">from_iter..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="405" width="6.5202%" height="15" fill="rgb(226,211,11)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="415.50">from_iter..</text></g><g><title>spec_extend&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;, alloc::alloc::Global&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="389" width="6.5202%" height="15" fill="rgb(236,162,54)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="399.50">spec_exte..</text></g><g><title>extend_trusted&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="373" width="6.5202%" height="15" fill="rgb(220,229,9)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="383.50">extend_tr..</text></g><g><title>for_each&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="357" width="6.5202%" height="15" fill="rgb(250,87,22)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="367.50">for_each&lt;..</text></g><g><title>fold&lt;chess_engine::magic_bitboards::MagicData, core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt;&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="341" width="6.5202%" height="15" fill="rgb(239,43,17)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="351.50">fold&lt;ches..</text></g><g><title>fold&lt;u64, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;&amp;u64, chess_engine::magic_bitboards::MagicData, (), chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt;&gt;&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="325" width="6.5202%" height="15" fill="rgb(231,177,25)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="335.50">fold&lt;u64,..</text></g><g><title>{closure#0}&lt;&amp;u64, chess_engine::magic_bitboards::MagicData, (), chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt;&gt;&gt; (58,660,534 samples, 6.52%)</title><rect x="92.3101%" y="309" width="6.5202%" height="15" fill="rgb(219,179,1)" fg:x="830485657" fg:w="58660534"/><text x="92.5601%" y="319.50">{closure#..</text></g><g><title>{closure#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt;&gt; (5,302,953 samples, 0.59%)</title><rect x="98.2409%" y="293" width="0.5894%" height="15" fill="rgb(238,219,53)" fg:x="883843238" fg:w="5302953"/><text x="98.4909%" y="303.50"></text></g><g><title>{closure#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_rook::{closure_env#1}&gt;&gt; (5,302,953 samples, 0.59%)</title><rect x="98.2409%" y="277" width="0.5894%" height="15" fill="rgb(232,167,36)" fg:x="883843238" fg:w="5302953"/><text x="98.4909%" y="287.50"></text></g><g><title>write&lt;chess_engine::magic_bitboards::MagicData&gt; (2,767,609 samples, 0.31%)</title><rect x="98.5227%" y="261" width="0.3076%" height="15" fill="rgb(244,19,51)" fg:x="886378582" fg:w="2767609"/><text x="98.7727%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,086,267 samples, 0.12%)</title><rect x="98.8303%" y="453" width="0.1207%" height="15" fill="rgb(224,6,22)" fg:x="889146191" fg:w="1086267"/><text x="99.0803%" y="463.50"></text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;, alloc::boxed::Box&lt;[chess_engine::magic_bitboards::SquareMagic], alloc::alloc::Global&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="709" width="7.3643%" height="15" fill="rgb(224,145,5)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="719.50">collect&lt;co..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="693" width="7.3643%" height="15" fill="rgb(234,130,49)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="703.50">from_iter&lt;..</text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;, alloc::vec::Vec&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="677" width="7.3643%" height="15" fill="rgb(254,6,2)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="687.50">collect&lt;co..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="661" width="7.3643%" height="15" fill="rgb(208,96,46)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="671.50">from_iter&lt;..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="645" width="7.3643%" height="15" fill="rgb(239,3,39)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="655.50">from_iter&lt;..</text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="629" width="7.3643%" height="15" fill="rgb(233,210,1)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="639.50">from_iter&lt;..</text></g><g><title>spec_extend&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;, alloc::alloc::Global&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="613" width="7.3643%" height="15" fill="rgb(244,137,37)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="623.50">spec_exten..</text></g><g><title>extend_trusted&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="597" width="7.3643%" height="15" fill="rgb(240,136,2)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="607.50">extend_tru..</text></g><g><title>for_each&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="581" width="7.3643%" height="15" fill="rgb(239,18,37)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="591.50">for_each&lt;c..</text></g><g><title>fold&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="565" width="7.3643%" height="15" fill="rgb(218,185,22)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="575.50">fold&lt;chess..</text></g><g><title>fold&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="549" width="7.3643%" height="15" fill="rgb(225,218,4)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="559.50">fold&lt;core:..</text></g><g><title>fold&lt;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::enumerate::{impl#1}::fold::enumerate::{closure_env#0}&lt;&amp;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt;&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="533" width="7.3643%" height="15" fill="rgb(230,182,32)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="543.50">fold&lt;chess..</text></g><g><title>{closure#0}&lt;&amp;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="517" width="7.3643%" height="15" fill="rgb(242,56,43)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="527.50">{closure#0..</text></g><g><title>{closure#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#0}&gt;&gt;&gt;&gt; (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="501" width="7.3643%" height="15" fill="rgb(233,99,24)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="511.50">{closure#0..</text></g><g><title>{closure#0} (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="485" width="7.3643%" height="15" fill="rgb(234,209,42)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="495.50">{closure#0}</text></g><g><title>new_rook (66,254,536 samples, 7.36%)</title><rect x="92.3101%" y="469" width="7.3643%" height="15" fill="rgb(227,7,12)" fg:x="830485657" fg:w="66254536"/><text x="92.5601%" y="479.50">new_rook</text></g><g><title>generate_rook_blockers (6,507,735 samples, 0.72%)</title><rect x="98.9511%" y="453" width="0.7233%" height="15" fill="rgb(245,203,43)" fg:x="890232458" fg:w="6507735"/><text x="99.2011%" y="463.50"></text></g><g><title>all (899,669,452 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="899669452"/><text x="0.2500%" y="1103.50"></text></g><g><title>chess_engine (899,669,452 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="899669452"/><text x="0.2500%" y="1087.50">chess_engine</text></g><g><title>_start (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="1061" width="99.9697%" height="15" fill="rgb(244,186,29)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="1071.50">_start</text></g><g><title>__libc_start_main (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="1045" width="99.9697%" height="15" fill="rgb(234,111,31)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="1055.50">__libc_start_main</text></g><g><title>[libc.so.6] (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="1029" width="99.9697%" height="15" fill="rgb(241,149,10)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="1039.50">[libc.so.6]</text></g><g><title>main (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="1013" width="99.9697%" height="15" fill="rgb(249,206,44)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="1023.50">main</text></g><g><title>__rust_begin_short_backtrace&lt;fn(), ()&gt; (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="997" width="99.9697%" height="15" fill="rgb(251,153,30)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="1007.50">__rust_begin_short_backtrace&lt;fn(), ()&gt;</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="981" width="99.9697%" height="15" fill="rgb(239,152,38)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="991.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>main (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="965" width="99.9697%" height="15" fill="rgb(249,139,47)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="975.50">main</text></g><g><title>test_unmake&lt;5&gt; (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="949" width="99.9697%" height="15" fill="rgb(244,64,35)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="959.50">test_unmake&lt;5&gt;</text></g><g><title>test_unmake_custom&lt;5&gt; (899,397,189 samples, 99.97%)</title><rect x="0.0303%" y="933" width="99.9697%" height="15" fill="rgb(216,46,15)" fg:x="272263" fg:w="899397189"/><text x="0.2803%" y="943.50">test_unmake_custom&lt;5&gt;</text></g><g><title>init_magic_mover (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="917" width="7.6899%" height="15" fill="rgb(250,74,19)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="927.50">init_magic_..</text></g><g><title>force&lt;chess_engine::magic_bitboards::MagicMover, fn()  (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="901" width="7.6899%" height="15" fill="rgb(249,42,33)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="911.50">force&lt;chess..</text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="885" width="7.6899%" height="15" fill="rgb(242,149,17)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="895.50"> chess_engi..</text></g><g><title>chess_engine::main (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="869" width="7.6899%" height="15" fill="rgb(244,29,21)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="879.50">chess_engin..</text></g><g><title>std::sys::sync::once::futex::Once::call (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="853" width="7.6899%" height="15" fill="rgb(220,130,37)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="863.50">std::sys::s..</text></g><g><title>{closure#0}&lt;std::sync::lazy_lock::{impl#0}::force::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="837" width="7.6899%" height="15" fill="rgb(211,67,2)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="847.50">{closure#0}..</text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt;&gt; (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="821" width="7.6899%" height="15" fill="rgb(235,68,52)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="831.50"> chess_engi..</text></g><g><title>{closure#0}&lt;chess_engine::magic_bitboards::MagicMover, fn()  (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="805" width="7.6899%" height="15" fill="rgb(246,142,3)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="815.50">{closure#0}..</text></g><g><title> chess_engine::magic_bitboards::MagicMover&gt; (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="789" width="7.6899%" height="15" fill="rgb(241,25,7)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="799.50"> chess_engi..</text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="773" width="7.6899%" height="15" fill="rgb(242,119,39)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="783.50">std::sync::..</text></g><g><title>call_once&lt;chess_engine::magic_bitboards::MAGIC_MOVER::{closure_env#0}, ()&gt; (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="757" width="7.6899%" height="15" fill="rgb(241,98,45)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="767.50">call_once&lt;c..</text></g><g><title>{closure#0} (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="741" width="7.6899%" height="15" fill="rgb(254,28,30)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="751.50">{closure#0}</text></g><g><title>init (69,183,795 samples, 7.69%)</title><rect x="92.3101%" y="725" width="7.6899%" height="15" fill="rgb(241,142,54)" fg:x="830485657" fg:w="69183795"/><text x="92.5601%" y="735.50">init</text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;, alloc::boxed::Box&lt;[chess_engine::magic_bitboards::SquareMagic], alloc::alloc::Global&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="709" width="0.3256%" height="15" fill="rgb(222,85,15)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="719.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="693" width="0.3256%" height="15" fill="rgb(210,85,47)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="703.50"></text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;, alloc::vec::Vec&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="677" width="0.3256%" height="15" fill="rgb(224,206,25)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="687.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="661" width="0.3256%" height="15" fill="rgb(243,201,19)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="671.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="645" width="0.3256%" height="15" fill="rgb(236,59,4)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="655.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="629" width="0.3256%" height="15" fill="rgb(254,179,45)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="639.50"></text></g><g><title>spec_extend&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;, alloc::alloc::Global&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="613" width="0.3256%" height="15" fill="rgb(226,14,10)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="623.50"></text></g><g><title>extend_trusted&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="597" width="0.3256%" height="15" fill="rgb(244,27,41)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="607.50"></text></g><g><title>for_each&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="581" width="0.3256%" height="15" fill="rgb(235,35,32)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="591.50"></text></g><g><title>fold&lt;chess_engine::magic_bitboards::SquareMagic, core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="565" width="0.3256%" height="15" fill="rgb(218,68,31)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="575.50"></text></g><g><title>fold&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="549" width="0.3256%" height="15" fill="rgb(207,120,37)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="559.50"></text></g><g><title>fold&lt;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::enumerate::{impl#1}::fold::enumerate::{closure_env#0}&lt;&amp;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="533" width="0.3256%" height="15" fill="rgb(227,98,0)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="543.50"></text></g><g><title>{closure#0}&lt;&amp;chess_engine::magic_bitboards::MagicHasher, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="517" width="0.3256%" height="15" fill="rgb(207,7,3)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="527.50"></text></g><g><title>{closure#0}&lt;(usize, &amp;chess_engine::magic_bitboards::MagicHasher), chess_engine::magic_bitboards::SquareMagic, (), chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::SquareMagic, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;chess_engine::magic_bitboards::MagicHasher&gt;&gt;, chess_engine::magic_bitboards::{impl#3}::init::{closure_env#1}&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="501" width="0.3256%" height="15" fill="rgb(206,98,19)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="511.50"></text></g><g><title>{closure#1} (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="485" width="0.3256%" height="15" fill="rgb(217,5,26)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="495.50"></text></g><g><title>new_bishop (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="469" width="0.3256%" height="15" fill="rgb(235,190,38)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="479.50"></text></g><g><title>collect&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;, alloc::vec::Vec&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="453" width="0.3256%" height="15" fill="rgb(247,86,24)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="463.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="437" width="0.3256%" height="15" fill="rgb(205,101,16)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="447.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="421" width="0.3256%" height="15" fill="rgb(246,168,33)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="431.50"></text></g><g><title>from_iter&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="405" width="0.3256%" height="15" fill="rgb(231,114,1)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="415.50"></text></g><g><title>spec_extend&lt;chess_engine::magic_bitboards::MagicData, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;, alloc::alloc::Global&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="389" width="0.3256%" height="15" fill="rgb(207,184,53)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="399.50"></text></g><g><title>extend_trusted&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="373" width="0.3256%" height="15" fill="rgb(224,95,51)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="383.50"></text></g><g><title>for_each&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="357" width="0.3256%" height="15" fill="rgb(212,188,45)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="367.50"></text></g><g><title>fold&lt;chess_engine::magic_bitboards::MagicData, core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}, (), core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="341" width="0.3256%" height="15" fill="rgb(223,154,38)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="351.50"></text></g><g><title>fold&lt;u64, (), core::iter::adapters::map::map_fold::{closure_env#0}&lt;&amp;u64, chess_engine::magic_bitboards::MagicData, (), chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="325" width="0.3256%" height="15" fill="rgb(251,22,52)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="335.50"></text></g><g><title>{closure#0}&lt;&amp;u64, chess_engine::magic_bitboards::MagicData, (), chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}, core::iter::traits::iterator::Iterator::for_each::call::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::vec::{impl#20}::extend_trusted::{closure_env#0}&lt;chess_engine::magic_bitboards::MagicData, alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;, chess_engine::magic_bitboards::{impl#5}::new_bishop::{closure_env#1}&gt;&gt;&gt;&gt; (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="309" width="0.3256%" height="15" fill="rgb(229,209,22)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="293" width="0.3256%" height="15" fill="rgb(234,138,34)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="303.50"></text></g><g><title>chess_engine::magic_bitboards::slide_blocker_possible_moves (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="277" width="0.3256%" height="15" fill="rgb(212,95,11)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="287.50"></text></g><g><title>chess_engine::position::Position::with_offset (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="261" width="0.3256%" height="15" fill="rgb(240,179,47)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="271.50"></text></g><g><title>add_y (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="245" width="0.3256%" height="15" fill="rgb(240,163,11)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="255.50"></text></g><g><title>chess_engine::position::Position::with_offset (2,929,259 samples, 0.33%)</title><rect x="99.6744%" y="229" width="0.3256%" height="15" fill="rgb(236,37,12)" fg:x="896740193" fg:w="2929259"/><text x="99.9244%" y="239.50"></text></g></svg></svg>